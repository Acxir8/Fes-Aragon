// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/25/2023 22:18:11"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CarritoMueve
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CarritoMueve_vlg_sample_tst(
	clk,
	ENTRADA,
	rst,
	sampler_tx
);
input  clk;
input [0:3] ENTRADA;
input  rst;
output sampler_tx;

reg sample;
time current_time;
always @(clk or ENTRADA or rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CarritoMueve_vlg_check_tst (
	al,
	av,
	ENTRADA,
	re,
	vd,
	vi,
	sampler_rx
);
input  al;
input  av;
input [0:3] ENTRADA;
input  re;
input  vd;
input  vi;
input sampler_rx;

reg  al_expected;
reg  av_expected;
reg [0:3] ENTRADA_expected;
reg  re_expected;
reg  vd_expected;
reg  vi_expected;

reg  al_prev;
reg  av_prev;
reg [0:3] ENTRADA_prev;
reg  re_prev;
reg  vd_prev;
reg  vi_prev;

reg  al_expected_prev;
reg  av_expected_prev;
reg [0:3] ENTRADA_expected_prev;
reg  re_expected_prev;
reg  vd_expected_prev;
reg  vi_expected_prev;

reg  last_al_exp;
reg  last_av_exp;
reg [0:3] last_ENTRADA_exp;
reg  last_re_exp;
reg  last_vd_exp;
reg  last_vi_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	al_prev = al;
	av_prev = av;
	ENTRADA_prev = ENTRADA;
	re_prev = re;
	vd_prev = vd;
	vi_prev = vi;
end

// update expected /o prevs

always @(trigger)
begin
	al_expected_prev = al_expected;
	av_expected_prev = av_expected;
	ENTRADA_expected_prev = ENTRADA_expected;
	re_expected_prev = re_expected;
	vd_expected_prev = vd_expected;
	vi_expected_prev = vi_expected;
end



// expected av
initial
begin
	av_expected = 1'bX;
end 

// expected re
initial
begin
	re_expected = 1'bX;
end 

// expected vd
initial
begin
	vd_expected = 1'bX;
end 

// expected vi
initial
begin
	vi_expected = 1'bX;
end 

// expected al
initial
begin
	al_expected = 1'bX;
end 
// generate trigger
always @(al_expected or al or av_expected or av or ENTRADA_expected or ENTRADA or re_expected or re or vd_expected or vd or vi_expected or vi)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected al = %b | expected av = %b | expected ENTRADA = %b | expected re = %b | expected vd = %b | expected vi = %b | ",al_expected_prev,av_expected_prev,ENTRADA_expected_prev,re_expected_prev,vd_expected_prev,vi_expected_prev);
	$display("| real al = %b | real av = %b | real ENTRADA = %b | real re = %b | real vd = %b | real vi = %b | ",al_prev,av_prev,ENTRADA_prev,re_prev,vd_prev,vi_prev);
`endif
	if (
		( al_expected_prev !== 1'bx ) && ( al_prev !== al_expected_prev )
		&& ((al_expected_prev !== last_al_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port al :: @time = %t",  $realtime);
		$display ("     Expected value = %b", al_expected_prev);
		$display ("     Real value = %b", al_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_al_exp = al_expected_prev;
	end
	if (
		( av_expected_prev !== 1'bx ) && ( av_prev !== av_expected_prev )
		&& ((av_expected_prev !== last_av_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port av :: @time = %t",  $realtime);
		$display ("     Expected value = %b", av_expected_prev);
		$display ("     Real value = %b", av_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_av_exp = av_expected_prev;
	end
	if (
		( ENTRADA_expected_prev[0] !== 1'bx ) && ( ENTRADA_prev[0] !== ENTRADA_expected_prev[0] )
		&& ((ENTRADA_expected_prev[0] !== last_ENTRADA_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ENTRADA[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ENTRADA_expected_prev);
		$display ("     Real value = %b", ENTRADA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ENTRADA_exp[0] = ENTRADA_expected_prev[0];
	end
	if (
		( ENTRADA_expected_prev[1] !== 1'bx ) && ( ENTRADA_prev[1] !== ENTRADA_expected_prev[1] )
		&& ((ENTRADA_expected_prev[1] !== last_ENTRADA_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ENTRADA[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ENTRADA_expected_prev);
		$display ("     Real value = %b", ENTRADA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ENTRADA_exp[1] = ENTRADA_expected_prev[1];
	end
	if (
		( ENTRADA_expected_prev[2] !== 1'bx ) && ( ENTRADA_prev[2] !== ENTRADA_expected_prev[2] )
		&& ((ENTRADA_expected_prev[2] !== last_ENTRADA_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ENTRADA[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ENTRADA_expected_prev);
		$display ("     Real value = %b", ENTRADA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ENTRADA_exp[2] = ENTRADA_expected_prev[2];
	end
	if (
		( ENTRADA_expected_prev[3] !== 1'bx ) && ( ENTRADA_prev[3] !== ENTRADA_expected_prev[3] )
		&& ((ENTRADA_expected_prev[3] !== last_ENTRADA_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ENTRADA[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ENTRADA_expected_prev);
		$display ("     Real value = %b", ENTRADA_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ENTRADA_exp[3] = ENTRADA_expected_prev[3];
	end
	if (
		( re_expected_prev !== 1'bx ) && ( re_prev !== re_expected_prev )
		&& ((re_expected_prev !== last_re_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port re :: @time = %t",  $realtime);
		$display ("     Expected value = %b", re_expected_prev);
		$display ("     Real value = %b", re_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_re_exp = re_expected_prev;
	end
	if (
		( vd_expected_prev !== 1'bx ) && ( vd_prev !== vd_expected_prev )
		&& ((vd_expected_prev !== last_vd_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vd_expected_prev);
		$display ("     Real value = %b", vd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_vd_exp = vd_expected_prev;
	end
	if (
		( vi_expected_prev !== 1'bx ) && ( vi_prev !== vi_expected_prev )
		&& ((vi_expected_prev !== last_vi_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port vi :: @time = %t",  $realtime);
		$display ("     Expected value = %b", vi_expected_prev);
		$display ("     Real value = %b", vi_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_vi_exp = vi_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CarritoMueve_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [0:3] treg_ENTRADA;
reg rst;
// wires                                               
wire al;
wire av;
wire [0:3] ENTRADA;
wire re;
wire vd;
wire vi;

wire sampler;                             

// assign statements (if any)                          
assign ENTRADA = treg_ENTRADA;
CarritoMueve i1 (
// port map - connection between master ports and signals/registers   
	.al(al),
	.av(av),
	.clk(clk),
	.ENTRADA(ENTRADA),
	.re(re),
	.rst(rst),
	.vd(vd),
	.vi(vi)
);

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// rst
initial
begin
	rst = 1'b0;
end 
// ENTRADA[ 3 ]
initial
begin
	treg_ENTRADA[3] = 1'bZ;
end 
// ENTRADA[ 2 ]
initial
begin
	treg_ENTRADA[2] = 1'bZ;
end 
// ENTRADA[ 1 ]
initial
begin
	treg_ENTRADA[1] = 1'bZ;
end 
// ENTRADA[ 0 ]
initial
begin
	treg_ENTRADA[0] = 1'bZ;
end 

CarritoMueve_vlg_sample_tst tb_sample (
	.clk(clk),
	.ENTRADA(ENTRADA),
	.rst(rst),
	.sampler_tx(sampler)
);

CarritoMueve_vlg_check_tst tb_out(
	.al(al),
	.av(av),
	.ENTRADA(ENTRADA),
	.re(re),
	.vd(vd),
	.vi(vi),
	.sampler_rx(sampler)
);
endmodule

