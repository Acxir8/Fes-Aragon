// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/23/2024 11:02:59"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Exceso3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Exceso3_vlg_sample_tst(
	systemA,
	systemB,
	systemC,
	systemD,
	sampler_tx
);
input  systemA;
input  systemB;
input  systemC;
input  systemD;
output sampler_tx;

reg sample;
time current_time;
always @(systemA or systemB or systemC or systemD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Exceso3_vlg_check_tst (
	w,
	x,
	y,
	z,
	sampler_rx
);
input  w;
input  x;
input  y;
input  z;
input sampler_rx;

reg  w_expected;
reg  x_expected;
reg  y_expected;
reg  z_expected;

reg  w_prev;
reg  x_prev;
reg  y_prev;
reg  z_prev;

reg  w_expected_prev;
reg  x_expected_prev;
reg  y_expected_prev;
reg  z_expected_prev;

reg  last_w_exp;
reg  last_x_exp;
reg  last_y_exp;
reg  last_z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	w_prev = w;
	x_prev = x;
	y_prev = y;
	z_prev = z;
end

// update expected /o prevs

always @(trigger)
begin
	w_expected_prev = w_expected;
	x_expected_prev = x_expected;
	y_expected_prev = y_expected;
	z_expected_prev = z_expected;
end



// expected w
initial
begin
	w_expected = 1'bX;
end 

// expected x
initial
begin
	x_expected = 1'bX;
end 

// expected y
initial
begin
	y_expected = 1'bX;
end 

// expected z
initial
begin
	z_expected = 1'bX;
end 
// generate trigger
always @(w_expected or w or x_expected or x or y_expected or y or z_expected or z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected w = %b | expected x = %b | expected y = %b | expected z = %b | ",w_expected_prev,x_expected_prev,y_expected_prev,z_expected_prev);
	$display("| real w = %b | real x = %b | real y = %b | real z = %b | ",w_prev,x_prev,y_prev,z_prev);
`endif
	if (
		( w_expected_prev !== 1'bx ) && ( w_prev !== w_expected_prev )
		&& ((w_expected_prev !== last_w_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w_expected_prev);
		$display ("     Real value = %b", w_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w_exp = w_expected_prev;
	end
	if (
		( x_expected_prev !== 1'bx ) && ( x_prev !== x_expected_prev )
		&& ((x_expected_prev !== last_x_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port x :: @time = %t",  $realtime);
		$display ("     Expected value = %b", x_expected_prev);
		$display ("     Real value = %b", x_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_x_exp = x_expected_prev;
	end
	if (
		( y_expected_prev !== 1'bx ) && ( y_prev !== y_expected_prev )
		&& ((y_expected_prev !== last_y_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port y :: @time = %t",  $realtime);
		$display ("     Expected value = %b", y_expected_prev);
		$display ("     Real value = %b", y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_y_exp = y_expected_prev;
	end
	if (
		( z_expected_prev !== 1'bx ) && ( z_prev !== z_expected_prev )
		&& ((z_expected_prev !== last_z_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_z_exp = z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Exceso3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg systemA;
reg systemB;
reg systemC;
reg systemD;
// wires                                               
wire w;
wire x;
wire y;
wire z;

wire sampler;                             

// assign statements (if any)                          
Exceso3 i1 (
// port map - connection between master ports and signals/registers   
	.systemA(systemA),
	.systemB(systemB),
	.systemC(systemC),
	.systemD(systemD),
	.w(w),
	.x(x),
	.y(y),
	.z(z)
);

// systemA
initial
begin
	systemA = 1'b0;
	systemA = #400000 1'b1;
	systemA = #400000 1'b0;
end 

// systemB
initial
begin
	repeat(2)
	begin
		systemB = 1'b0;
		systemB = #200000 1'b1;
		# 200000;
	end
	systemB = 1'b0;
end 

// systemC
always
begin
	systemC = 1'b0;
	systemC = #100000 1'b1;
	#100000;
end 

// systemD
always
begin
	systemD = 1'b0;
	systemD = #50000 1'b1;
	#50000;
end 

Exceso3_vlg_sample_tst tb_sample (
	.systemA(systemA),
	.systemB(systemB),
	.systemC(systemC),
	.systemD(systemD),
	.sampler_tx(sampler)
);

Exceso3_vlg_check_tst tb_out(
	.w(w),
	.x(x),
	.y(y),
	.z(z),
	.sampler_rx(sampler)
);
endmodule

